/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces.Registros;

import Mysql.CopiaSeguridad;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author HP
 */
public class Backup extends javax.swing.JFrame {

    JFileChooser seleccionado = new JFileChooser();
    File archivo;
    CopiaSeguridad gestion = new CopiaSeguridad();

    public Backup() {
        initComponents();
       
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TxtBackup = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        TxtBackup.setColumns(20);
        TxtBackup.setRows(5);
        TxtBackup.setText("Create database TAMECON;\nUse TAMECON;\nCreate Table Vehiculo(\n\tPlaca varchar(12) primary key,\n    Modelo varchar(50),\n    Color varchar(20),\n    NombreCliente varchar(80)\n);\nCreate Table Ayudante(\n\tId int auto_increment primary key,\n    Nombre varchar(35),\n    Estado CHAR(1)\n);\n\nCreate table IngresoVehiculo(\n\tId int Auto_Increment primary key,\n    Placa varchar(12),\n    PC int,\n    FechaIngreso datetime,\n    FechaIngreso1 varchar(12),\n    FechaSalida datetime,\n    FechaSalida1 varchar(12),\n    foreign key (Placa) references Vehiculo(Placa),\n    Foreign key (PC) references Ayudante(Id)\n);\nCreate table Inventario(\n\tCodigo varchar(15)primary key,\n    Material varchar(100),\n    PrecioCompra float,\n    PrecioVenta float,\n    Unidad varchar(10)\n);\ncreate table DepositoTotal(\n\tCodigo varchar(15)primary key,\n    CEntrada float,\n    CSalida float,\n    CSaldo float,\n\tForeign key (Codigo) references Inventario(Codigo)\n);\nCreate table Deposito(\n\tCodigo varchar(15),\n    CEntrada float,\n    CSalida float,\n    CSaldo float,\n    Fecha datetime,\n    Foreign key (Codigo) references Inventario(Codigo)\n);\n\nCreate Table EntregaMateriales(\n\tId int auto_Increment primary key,\n\tCodigo varchar(15),\n    IdV int,\n    Cantidad float,\n    PrecioVenta float,\n    Fecha datetime,\n    User varchar(25),\n    Descuento float,\n    Foreign key (User) references Usuario(User),\n    Foreign key(Codigo) references Inventario(Codigo),\n    Foreign key (IdV) references IngresoVehiculo(Id)\n);\n\n\nCreate table NroVenta(\n\tId int auto_Increment Primary key,\n    Nombre varchar(50),\n    Descuento float,\n    User varchar(25),\n     Foreign key (User) references Usuario(User)\n);\n\n\nCreate table Venta(\n\tI int Auto_Increment primary key,\n\tId int,\n\tCodigo varchar(15),\n    Cantidad float,\n    PrecioVenta float,\n    FechaCancelacion datetime,\n    Foreign key(Id)references NroVenta(Id),\n    Foreign key(Codigo) references Inventario(Codigo)\n);\n\n                    \nCreate Table Usuario(\n\tUser varchar(25) primary key,\n    Password varchar(60),\n    NombreUsuario varchar(50),\n    FechaIngreso datetime,\n    Cargo varchar(25)\n);\ncreate table Proveedor(\n\tId int auto_increment primary key,\n    Nombre varchar(50),\n    Telefono varchar(20),\n    Direccion varchar(100),\n    Detalles varchar(100)\n);\nCreate table Bitacora(\n\tUser varchar(25),\n    FechaIngreso datetime,\n    Foreign key (User) references Usuario(User)\n);\ndelimiter $\nCREATE PROCEDURE `InsertarNuevoMaterial` (IN `Cod` VARCHAR(15), IN `CM` VARCHAR(50), IN `M` VARCHAR(100), IN `PC` FLOAT, IN `PV` FLOAT, IN `U` VARCHAR(10), IN `C` FLOAT)\n  begin\n\tinsert Into Inventario(Codigo,CodMat,Material,PrecioCompra,PrecioVenta,Unidad) Values(Cod,CM,M,PC,PV,U);\n    Insert into Deposito(Codigo,CEntrada,CSalida,Fecha) values(Cod,C,0,now());\n    Insert Into DepositoTotal(Codigo,CEntrada,CSalida,CSaldo) values(Cod,C,0,C);\n\t\t\nend $\n\n\ndelimiter $\ncreate procedure ModificarMaterial(IN Cod VARCHAR(15), IN CM VARCHAR(50), IN M VARCHAR(100), IN PC FLOAT, IN PV FLOAT, IN U VARCHAR(10), IN C FLOAT)\n\tbegin\n\tUPDATE Inventario SET CodMat=CM,Material=M,PrecioCompra= PC,PrecioVenta = PV,Unidad=U where Codigo=Cod;\n    UPDATE DepositoTotal SET CEntrada=C,CSaldo=C,CSalida=0 where Codigo=Cod;\n\tend $\n\nDELIMITER $\nCREATE PROCEDURE InsertarDeposito (IN `Cod` VARCHAR(15), IN `CE` FLOAT, IN `CS` FLOAT) \n begin\nSet @CE1=(Select CEntrada from DepositoTotal where Codigo=Cod);\nSet @CS1=(Select CSalida from DepositoTotal where Codigo=Cod);\n\n\tinsert Into Deposito(Codigo,CEntrada,CSalida,Fecha) values(Cod,CE,CS,Now());\n    Update DepositoTotal SET CEntrada=CE+@CE1, CSalida=CS+@CS1, CSaldo=(CE+@CE1)-(CS+@CS1) where Codigo=Cod;\nend$\ndelimiter $\ncreate procedure IngresoVehiculo(in placa varchar(12),in Nomb varchar(35),in fecha varchar(12))\nbegin\nset @Id=(Select Id from Ayudante where Nombre=Nomb);\nInsert Into IngresoVehiculo(Placa,PC,FechaIngreso1,FechaIngreso,FechaSalida1) values(placa,@Id,fecha,NOW(),'null');\nend $\n\ndelimiter $\ncreate procedure ModificarIngresoVehiculo(in placa varchar(12),in Nomb varchar(35),in I int)\nbegin\nset @Id=(Select Id from Ayudante where Nombre=Nomb);\nUpdate IngresoVehiculo SET Placa=placa, PC=@Id,FechaIngreso=now() Where Id=I;\nend $\n\n\ndelimiter $\ncreate procedure Entrega(in Cod varchar(15),in Id int,in Cant float,in Us varchar(25),in Des float,in PV float)\nbegin\ninsert into EntregaMateriales(Codigo,IdV,Cantidad,PrecioVenta,Fecha,User,Descuento)values(Cod,Id,Cant,PV,NOW(),Us,Des);\nCALL InsertarDeposito(Cod,0,Cant);\nend $\ndelimiter $\nCreate Procedure Quitar(in I int,in Cod Varchar(15),in Cant float)\nbegin\nSet @C=(Select CSalida from DepositoTotal Where Codigo=Cod);\nSet @CE=(Select CEntrada from DepositoTotal Where Codigo=Cod);\nSet @CS=(Select CSaldo from DepositoTotal Where Codigo=Cod);\nDelete From EntregaMateriales Where Id=I;\nUpdate DepositoTotal Set CSalida=@C-Cant,CSaldo=@C-Cant+@CE+Cant Where Codigo=Cod;\nend $\n\ndelimiter $\nCreate Procedure AgregarRebaja(in Id int,in Des float)\nbegin\nUpdate EntregaMateriales SEt Descuento=Des where IdV=Id;\nend$\n\ndelimiter $\nCreate Procedure AgregarVenta(in Ide int,Cod varchar(15),\n    Cant float,\n    PV float)\nbegin\ninsert into Venta(Id,Codigo,Cantidad,PrecioVenta,FechaCancelacion)values(Ide,Cod,Cant,PV,'1111-11-11 00:00:00');\nCALL InsertarDeposito(Cod,0,Cant);\nend$\n\ndelimiter $\nCreate Procedure QuitarVenta(in Cod varchar(15),\n    in Cant float,\n    in iss int)\nbegin\nSet @C=(Select CSalida from DepositoTotal Where Codigo=Cod);\nSet @CE=(Select CEntrada from DepositoTotal Where Codigo=Cod);\nDelete From Venta  Where I=iss;\nUpdate DepositoTotal Set CSalida=@C-Cant,CSaldo=@CE-(@C-Cant) Where Codigo=Cod;\nend$\n\ndelimiter $\ncreate procedure InsertarDescuento(in Des float,in iss int)\nbegin\n\tUpdate NroVenta Set Descuento=Des Where Id=iss;\nend $\n\ndelimiter $\nCreate Procedure FechaS(in FS varchar(12),in d int)\nbegin\nUPDATE IngresoVehiculo SET FechaSalida1=FS,FechaSalida=now() where Id=d;\nend $\nSelect * From Venta;\nSelect * From NroVenta;\ndelimiter $\nCreate Procedure FeS(in iss int)\nbegin\nUPDATE Venta SET FechaCancelacion=now() where Id=iss;\nend $\n\ndelimiter $\nCreate Procedure RVenta(in Nomb varchar(50),in Us varchar(25))\nbegin\ninsert into NroVenta(Nombre,User,Descuento) values(Nomb,Us,0);\nend $\n\n\nDELIMITER $$\n--\n-- Procedimientos\n--\nCREATE  PROCEDURE AgregarRebaja (IN Id INT, IN Des FLOAT)  begin\nUpdate EntregaMateriales SEt Descuento=Des where IdV=Id;\nend$$\n\nCREATE  PROCEDURE AgregarVenta (IN Ide INT, Cod VARCHAR(15), Cant FLOAT, PV FLOAT)  begin\ninsert into Venta(Id,Codigo,Cantidad,PrecioVenta,FechaCancelacion)values(Ide,Cod,Cant,PV,'1111-11-11 00:00:00');\nCALL InsertarDeposito(Cod,0,Cant);\nend$$\n\nCREATE PROCEDURE Entrega (IN Cod VARCHAR(15), IN Id INT, IN Cant FLOAT, IN Us VARCHAR(25), IN Des FLOAT, IN PV FLOAT)  begin\ninsert into EntregaMateriales(Codigo,IdV,Cantidad,PrecioVenta,Fecha,User,Descuento)values(Cod,Id,Cant,PV,NOW(),Us,Des);\nCALL InsertarDeposito(Cod,0,Cant);\nend$$\n\nCREATE PROCEDURE FechaS (IN FS VARCHAR(12), IN d INT)  begin\nUPDATE IngresoVehiculo SET FechaSalida1=FS,FechaSalida=now() where Id=d;\nend$$\n\nCREATE PROCEDURE FeS (IN iss INT)  begin\nUPDATE Venta SET FechaCancelacion=now() where Id=iss;\nend$$\n\nCREATE PROCEDURE IngresoVehiculo (IN placa VARCHAR(12), IN Nomb VARCHAR(35), IN fecha VARCHAR(12))  begin\nset @Id=(Select Id from Ayudante where Nombre=Nomb);\nInsert Into IngresoVehiculo(Placa,PC,FechaIngreso1,FechaIngreso,FechaSalida1) values(placa,@Id,fecha,NOW(),'null');\nend$$\n\nCREATE PROCEDURE InsertarDeposito (IN Cod VARCHAR(15), IN CE FLOAT, IN CS FLOAT)  begin\nSet @CE1=(Select CEntrada from DepositoTotal where Codigo=Cod);\nSet @CS1=(Select CSalida from DepositoTotal where Codigo=Cod);\n\n\tinsert Into Deposito(Codigo,CEntrada,CSalida,Fecha) values(Cod,CE,CS,Now());\n    Update DepositoTotal SET CEntrada=CE+@CE1, CSalida=CS+@CS1, CSaldo=(CE+@CE1)-(CS+@CS1) where Codigo=Cod;\nend$$\n\nCREATE PROCEDURE InsertarDescuento (IN Des FLOAT, IN iss INT)  begin\n\tUpdate NroVenta Set Descuento=Des Where Id=iss;\nend$$\n\nCREATE PROCEDURE InsertarNuevoMaterial (IN Cod VARCHAR(15), IN CM VARCHAR(50), IN M VARCHAR(100), IN PC FLOAT, IN PV FLOAT, IN U VARCHAR(10), IN C FLOAT)  begin\n\tinsert Into Inventario(Codigo,CodMat,Material,PrecioCompra,PrecioVenta,Unidad) Values(Cod,CM,M,PC,PV,U);\n    Insert into Deposito(Codigo,CEntrada,CSalida,Fecha) values(Cod,C,0,now());\n    Insert Into DepositoTotal(Codigo,CEntrada,CSalida,CSaldo) values(Cod,C,0,C);\n    \nend$$\n\nCREATE  PROCEDURE InsertarProveedor (IN Nomb VARCHAR(50), IN Telef VARCHAR(20), IN Direc VARCHAR(100), IN Det VARCHAR(100))  begin\nInsert Into Proveedor(Nombre,Telefono,Direccion,Detalles)values(Nomb,Telef,Direc,Det);\nend$$\n\nCREATE PROCEDURE ModificarAyudante (IN I INT, IN Nomb VARCHAR(35), IN St CHAR(1))  begin\n\tUPDATE Ayudante SET Estado=St, Nombre=Nomb Where Id=I;\nend$$\n\nCREATE PROCEDURE ModificarIngresoVehiculo (IN placa VARCHAR(12), IN Nomb VARCHAR(35), IN I INT)  begin\nset @Id=(Select Id from Ayudante where Nombre=Nomb);\nUpdate IngresoVehiculo SET Placa=placa, PC=@Id,FechaIngreso=now() Where Id=I;\nend$$\n\nCREATE PROCEDURE ModificarMaterial (IN Cod VARCHAR(15), IN CM VARCHAR(50), IN M VARCHAR(100), IN PC FLOAT, IN PV FLOAT, IN U VARCHAR(10), IN C FLOAT)  begin\n\tUPDATE Inventario SET CodMat=CM,Material=M,PrecioCompra= PC,PrecioVenta = PV,Unidad=U where Codigo=Cod;\n    UPDATE DepositoTotal SET CEntrada=C,CSaldo=C,CSalida=0 where Codigo=Cod;\n\tend$$\n\nCREATE PROCEDURE ModificarProveedor (IN Nomb VARCHAR(50), IN Telef VARCHAR(20), IN Direc VARCHAR(100), IN Det VARCHAR(100), IN I INT)  begin\n    Update Proveedor Set Nombre=Nomb,Telefono=Telef,Direccion=Direc,Detalles=Det Where Id=I;\n    End$$\n\nCREATE PROCEDURE Quitar (IN I INT, IN Cod VARCHAR(15), IN Cant FLOAT)  begin\nSet @C=(Select CSalida from DepositoTotal Where Codigo=Cod);\nSet @CE=(Select CEntrada from DepositoTotal Where Codigo=Cod);\nSet @CS=(Select CSaldo from DepositoTotal Where Codigo=Cod);\nDelete From EntregaMateriales Where Id=I;\nUpdate DepositoTotal Set CSalida=@C-Cant,CSaldo=@C-Cant+@CE+Cant Where Codigo=Cod;\nend$$\n\nCREATE PROCEDURE QuitarVenta (IN Cod VARCHAR(15), IN Cant FLOAT, IN iss INT)  begin\nSet @C=(Select CSalida from DepositoTotal Where Codigo=Cod);\nSet @CE=(Select CEntrada from DepositoTotal Where Codigo=Cod);\nDelete From Venta  Where I=iss;\nUpdate DepositoTotal Set CSalida=@C-Cant,CSaldo=@CE-(@C-Cant) Where Codigo=Cod;\nend$$\n\nCREATE PROCEDURE RVenta (IN Nomb VARCHAR(50), IN Us VARCHAR(25))  begin\ninsert into NroVenta(Nombre,User,Descuento) values(Nomb,Us,0);\nend$$\n\nDELIMITER ;");
        jScrollPane1.setViewportView(TxtBackup);

        jButton1.setText("GUARDAR COPIA DE SEGURIDAD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(241, 241, 241)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (seleccionado.showDialog(Texto(), "Guardar Copia Seguridad") == JFileChooser.APPROVE_OPTION) {
            archivo = seleccionado.getSelectedFile();
            

            if (archivo.getName().endsWith("bd") || archivo.getName().endsWith("txt")||archivo.getName().endsWith("")) {
                String contenido = Texto().getText();
                String respuesta = gestion.guardarTexto(archivo, contenido);
                if (contenido != null) {
                    JOptionPane.showMessageDialog(null, respuesta);
                } else {
                    JOptionPane.showMessageDialog(null, "Error");
                }
            }
        }       // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                }
                new Backup().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea TxtBackup;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    public JButton Guardar() {
        return jButton1;
    }

    public JTextArea Texto() {
        return TxtBackup;
    }
}
